name: ntfy.sh Notifications

on:
  push:
    branches: [ main, develop, master, staging ]
  pull_request:
    branches: [ main, master, staging ]
  release:
    types: [ published ]
  workflow_run:
    workflows: ["CI", "Build", "Test", "Deploy"]
    types: [ completed ]
  check_run:
    types: [ completed ]
  check_suite:
    types: [ completed ]

jobs:
  notify:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download ntfy manager files
      run: |
        mkdir -p ntfy-tools
        # GitHub Raw API kullanarak dosyalarƒ± indir
        curl -L -o ntfy-tools/ntfy-manager.py https://raw.githubusercontent.com/fundero/ntfy/main/ntfy-manager.py
        curl -L -o ntfy-tools/ntfy-manager.json https://raw.githubusercontent.com/fundero/ntfy/main/ntfy-manager.json
        chmod +x ntfy-tools/ntfy-manager.py
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      working-directory: ./ntfy-tools
      run: |
        uv init --name ntfy-tools --no-readme
        uv add requests
        
    - name: Send push notification
      if: github.event_name == 'push'
      working-directory: ./ntfy-tools
      env:
        REPO_NAME: ${{ github.repository }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        BRANCH: ${{ github.ref_name }}
        ACTOR: ${{ github.actor }}
      run: |
        repo_name=$(basename "$REPO_NAME")
        message="üîÄ Push to $BRANCH by $ACTOR: $COMMIT_MESSAGE"
        uv run python ./ntfy-manager.py send "$repo_name" push "$message"
        
    - name: Send PR notification
      if: github.event_name == 'pull_request'
      working-directory: ./ntfy-tools
      env:
        REPO_NAME: ${{ github.repository }}
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_ACTION: ${{ github.event.action }}
        ACTOR: ${{ github.actor }}
      run: |
        repo_name=$(basename "$REPO_NAME")
        message="üìù PR $PR_ACTION by $ACTOR: $PR_TITLE"
        uv run python ./ntfy-manager.py send "$repo_name" pr "$message"
        
    - name: Send release notification
      if: github.event_name == 'release'
      working-directory: ./ntfy-tools
      env:
        REPO_NAME: ${{ github.repository }}
        RELEASE_TAG: ${{ github.event.release.tag_name }}
        RELEASE_NAME: ${{ github.event.release.name }}
      run: |
        repo_name=$(basename "$REPO_NAME")
        message="üöÄ Release $RELEASE_TAG: $RELEASE_NAME"
        uv run python ./ntfy-manager.py send "$repo_name" release "$message" --priority high
        
    - name: Send workflow completion notification
      if: github.event_name == 'workflow_run'
      working-directory: ./ntfy-tools
      env:
        REPO_NAME: ${{ github.repository }}
        WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
        WORKFLOW_STATUS: ${{ github.event.workflow_run.conclusion }}
      run: |
        repo_name=$(basename "$REPO_NAME")
        if [ "$WORKFLOW_STATUS" = "success" ]; then
          message="‚úÖ $WORKFLOW_NAME completed successfully"
          priority="default"
        else
          message="‚ùå $WORKFLOW_NAME failed"
          priority="urgent"
        fi
        uv run python ./ntfy-manager.py send "$repo_name" build "$message" --priority "$priority"
        
    - name: Send build notification
      if: github.event_name == 'check_run' || github.event_name == 'check_suite'
      working-directory: ./ntfy-tools
      env:
        REPO_NAME: ${{ github.repository }}
        CHECK_STATUS: ${{ github.event.check_run.conclusion || github.event.check_suite.conclusion }}
        CHECK_NAME: ${{ github.event.check_run.name || github.event.check_suite.app.name }}
      run: |
        repo_name=$(basename "$REPO_NAME")
        if [ "$CHECK_STATUS" = "success" ]; then
          message="‚úÖ Build successful: $CHECK_NAME"
          priority="default"
        elif [ "$CHECK_STATUS" = "failure" ]; then
          message="‚ùå Build failed: $CHECK_NAME"
          priority="urgent"
        else
          message="‚ö†Ô∏è Build $CHECK_STATUS: $CHECK_STATUS"
          priority="default"
        fi
        uv run python ./ntfy-manager.py send "$repo_name" build "$message" --priority "$priority"